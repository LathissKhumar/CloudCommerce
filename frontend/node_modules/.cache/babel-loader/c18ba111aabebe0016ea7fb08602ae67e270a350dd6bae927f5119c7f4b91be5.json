{"ast":null,"code":"var _jsxFileName = \"D:\\\\VSCode\\\\CloudCommerce\\\\frontend\\\\src\\\\contexts\\\\NotificationContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { io } from 'socket.io-client';\nimport { useAuth } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationContext = /*#__PURE__*/createContext();\nexport const useNotifications = () => {\n  _s();\n  const context = useContext(NotificationContext);\n  if (!context) {\n    throw new Error('useNotifications must be used within a NotificationProvider');\n  }\n  return context;\n};\n_s(useNotifications, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const NotificationProvider = ({\n  children\n}) => {\n  _s2();\n  const [socket, setSocket] = useState(null);\n  const [notifications, setNotifications] = useState([]);\n  const [isConnected, setIsConnected] = useState(false);\n  const {\n    user,\n    isAuthenticated\n  } = useAuth();\n  const addNotification = React.useCallback(notification => {\n    setNotifications(prev => [notification, ...prev].slice(0, 10)); // Keep only last 10\n\n    // Auto remove after 5 seconds\n    setTimeout(() => {\n      setNotifications(prev => prev.filter(notif => notif.id !== notification.id));\n    }, 5000);\n  }, []);\n  useEffect(() => {\n    // Initialize socket connection\n    const newSocket = io(process.env.REACT_APP_BACKEND_URL || 'http://localhost:5000', {\n      transports: ['websocket', 'polling'],\n      withCredentials: true\n    });\n    newSocket.on('connect', () => {\n      console.log('Socket connected:', newSocket.id);\n      setIsConnected(true);\n\n      // Join user room if authenticated\n      if (isAuthenticated && user !== null && user !== void 0 && user.id) {\n        newSocket.emit('join-user-room', user.id);\n\n        // Join admin room if user is admin\n        if (user.role === 'admin') {\n          newSocket.emit('join-admin-room');\n        }\n      }\n    });\n    newSocket.on('disconnect', () => {\n      console.log('Socket disconnected');\n      setIsConnected(false);\n    });\n\n    // Listen for order notifications\n    newSocket.on('orderCreated', data => {\n      addNotification({\n        id: Date.now(),\n        type: 'success',\n        title: 'Order Created',\n        message: `Your order #${data.orderNumber} has been created successfully!`,\n        timestamp: new Date(),\n        data\n      });\n    });\n    newSocket.on('orderStatusUpdate', data => {\n      addNotification({\n        id: Date.now(),\n        type: 'info',\n        title: 'Order Update',\n        message: `Order #${data.orderNumber} status changed to ${data.newStatus}`,\n        timestamp: new Date(),\n        data\n      });\n    });\n\n    // Admin notifications\n    newSocket.on('newOrder', data => {\n      if ((user === null || user === void 0 ? void 0 : user.role) === 'admin') {\n        addNotification({\n          id: Date.now(),\n          type: 'info',\n          title: 'New Order',\n          message: `New order #${data.orderNumber} from ${data.customerName}`,\n          timestamp: new Date(),\n          data\n        });\n      }\n    });\n    newSocket.on('orderStatusChanged', data => {\n      if ((user === null || user === void 0 ? void 0 : user.role) === 'admin') {\n        addNotification({\n          id: Date.now(),\n          type: 'info',\n          title: 'Order Status Changed',\n          message: `Order #${data.orderNumber} status changed to ${data.status}`,\n          timestamp: new Date(),\n          data\n        });\n      }\n    });\n    setSocket(newSocket);\n\n    // Cleanup\n    return () => {\n      newSocket.close();\n    };\n  }, [isAuthenticated, user, addNotification]);\n  const removeNotification = id => {\n    setNotifications(prev => prev.filter(notif => notif.id !== id));\n  };\n  const clearAllNotifications = () => {\n    setNotifications([]);\n  };\n  const showNotification = (type, title, message, data = null) => {\n    addNotification({\n      id: Date.now(),\n      type,\n      title,\n      message,\n      timestamp: new Date(),\n      data\n    });\n  };\n  const value = {\n    socket,\n    isConnected,\n    notifications,\n    addNotification,\n    removeNotification,\n    clearAllNotifications,\n    showNotification\n  };\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n};\n_s2(NotificationProvider, \"MaPahOKMBW9FdJrjxRXmegYuEAI=\", false, function () {\n  return [useAuth];\n});\n_c = NotificationProvider;\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","io","useAuth","jsxDEV","_jsxDEV","NotificationContext","useNotifications","_s","context","Error","NotificationProvider","children","_s2","socket","setSocket","notifications","setNotifications","isConnected","setIsConnected","user","isAuthenticated","addNotification","useCallback","notification","prev","slice","setTimeout","filter","notif","id","newSocket","process","env","REACT_APP_BACKEND_URL","transports","withCredentials","on","console","log","emit","role","data","Date","now","type","title","message","orderNumber","timestamp","newStatus","customerName","status","close","removeNotification","clearAllNotifications","showNotification","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/VSCode/CloudCommerce/frontend/src/contexts/NotificationContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\r\nimport { io } from 'socket.io-client';\r\nimport { useAuth } from './AuthContext';\r\n\r\nconst NotificationContext = createContext();\r\n\r\nexport const useNotifications = () => {\r\n  const context = useContext(NotificationContext);\r\n  if (!context) {\r\n    throw new Error('useNotifications must be used within a NotificationProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const NotificationProvider = ({ children }) => {\r\n  const [socket, setSocket] = useState(null);\r\n  const [notifications, setNotifications] = useState([]);\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const { user, isAuthenticated } = useAuth();\r\n\r\n  const addNotification = React.useCallback((notification) => {\r\n    setNotifications(prev => [notification, ...prev].slice(0, 10)); // Keep only last 10\r\n    \r\n    // Auto remove after 5 seconds\r\n    setTimeout(() => {\r\n      setNotifications(prev => prev.filter(notif => notif.id !== notification.id));\r\n    }, 5000);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Initialize socket connection\r\n    const newSocket = io(process.env.REACT_APP_BACKEND_URL || 'http://localhost:5000', {\r\n      transports: ['websocket', 'polling'],\r\n      withCredentials: true\r\n    });\r\n\r\n    newSocket.on('connect', () => {\r\n      console.log('Socket connected:', newSocket.id);\r\n      setIsConnected(true);\r\n      \r\n      // Join user room if authenticated\r\n      if (isAuthenticated && user?.id) {\r\n        newSocket.emit('join-user-room', user.id);\r\n        \r\n        // Join admin room if user is admin\r\n        if (user.role === 'admin') {\r\n          newSocket.emit('join-admin-room');\r\n        }\r\n      }\r\n    });\r\n\r\n    newSocket.on('disconnect', () => {\r\n      console.log('Socket disconnected');\r\n      setIsConnected(false);\r\n    });\r\n\r\n    // Listen for order notifications\r\n    newSocket.on('orderCreated', (data) => {\r\n      addNotification({\r\n        id: Date.now(),\r\n        type: 'success',\r\n        title: 'Order Created',\r\n        message: `Your order #${data.orderNumber} has been created successfully!`,\r\n        timestamp: new Date(),\r\n        data\r\n      });\r\n    });\r\n\r\n    newSocket.on('orderStatusUpdate', (data) => {\r\n      addNotification({\r\n        id: Date.now(),\r\n        type: 'info',\r\n        title: 'Order Update',\r\n        message: `Order #${data.orderNumber} status changed to ${data.newStatus}`,\r\n        timestamp: new Date(),\r\n        data\r\n      });\r\n    });\r\n\r\n    // Admin notifications\r\n    newSocket.on('newOrder', (data) => {\r\n      if (user?.role === 'admin') {\r\n        addNotification({\r\n          id: Date.now(),\r\n          type: 'info',\r\n          title: 'New Order',\r\n          message: `New order #${data.orderNumber} from ${data.customerName}`,\r\n          timestamp: new Date(),\r\n          data\r\n        });\r\n      }\r\n    });\r\n\r\n    newSocket.on('orderStatusChanged', (data) => {\r\n      if (user?.role === 'admin') {\r\n        addNotification({\r\n          id: Date.now(),\r\n          type: 'info',\r\n          title: 'Order Status Changed',\r\n          message: `Order #${data.orderNumber} status changed to ${data.status}`,\r\n          timestamp: new Date(),\r\n          data\r\n        });\r\n      }\r\n    });\r\n\r\n    setSocket(newSocket);\r\n\r\n    // Cleanup\r\n    return () => {\r\n      newSocket.close();\r\n    };\r\n  }, [isAuthenticated, user, addNotification]);\r\n\r\n  const removeNotification = (id) => {\r\n    setNotifications(prev => prev.filter(notif => notif.id !== id));\r\n  };\r\n\r\n  const clearAllNotifications = () => {\r\n    setNotifications([]);\r\n  };\r\n\r\n  const showNotification = (type, title, message, data = null) => {\r\n    addNotification({\r\n      id: Date.now(),\r\n      type,\r\n      title,\r\n      message,\r\n      timestamp: new Date(),\r\n      data\r\n    });\r\n  };\r\n\r\n  const value = {\r\n    socket,\r\n    isConnected,\r\n    notifications,\r\n    addNotification,\r\n    removeNotification,\r\n    clearAllNotifications,\r\n    showNotification\r\n  };\r\n\r\n  return (\r\n    <NotificationContext.Provider value={value}>\r\n      {children}\r\n    </NotificationContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}